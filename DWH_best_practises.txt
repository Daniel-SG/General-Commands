DataWarehouse

Volume
Velocity
Variety

Centralized Data Warehouse
	- Single Database

	DWH vs DataMart

	The data mart is a subset of the data warehouse and is usually oriented to a specific business line or team. Whereas data warehouses have an enterprise-wide depth, the information in data marts pertains to a single department. ... Each data mart is dedicated to a specific business function or region.

	Cubes
	- Fast query response times
	- Modes data volumes < 100GB
	- Less flexible data structure than RDBMS
	- More vendor variation than with RDBMSs

	ODS (Operational Data Store)
	Es como DWH pero se centraliza en datos actuales (real time data) mas que en historicos

	Data Lake
	A data lake is a system or repository of data stored in its natural/raw format,[1] usually object blobs or files. 
	A data lake is usually a single store of all enterprise data including raw copies of source system data and transformed data used 
	for tasks such as reporting, visualization, advanced analytics and machine learning. 
	A data lake can include structured data from relational databases (rows and columns), semi-structured data (CSV, logs, XML, JSON),
	unstructured data (emails, documents, PDFs) and binary data (images, audio, video). 
	[2] A data lake can be established "on premises" (within an organization's data centers) or "in the cloud" 
	(using cloud services from vendors such as Amazon, Google and Microsoft).

Star Squema
	- Hay menos joins y las relaciones de PK y FK son sencillas
	- Una dimension puede tener datos agregados de otras dimensiones asi que puedes tener datos de 3 dimensiones en una.
	- normalmente se necesita mas espacio para la dimension
	- Solo hay un paso de las dimensiones a la tabla F_
	- la tabla de F_ tiene las PK de las dimensiones pero la F_ solo tiene una PK y es la de la dimension o el attributo de 
	la dimension de mas bajo nivel, si son del mismo nivel, es una PK combinada de las Pk de las dimensiones
	- Datos NO normalizados(denormalized) (no hay tablas de lookup, tenemos country_id y country_name en la misma dimension)
	- https://en.wikipedia.org/wiki/Star_schema

	D_Department ->
								F_Budget     <- D_Time
	D_Expense+Category ->

Snowflake Squema
	- hay varias dimensiones apuntando a otras dimensiones hasta llegar a la F_
	- mas joins pq las tablas estan separadas
	- PK y FK son mas complejas
	- Datos normalizados (SI hay tablas de lookup, tenemos country_id y otra tabla con el id y el nombre del pais)
	- Data Split into different Dimension Tables.
	- Las dimensiones tienen una FK de las tablas relacionadas (D_Department tendra una FK de D_Colleague en el ejemplo de abajo)
	- Las tablas F_ pueden tener una PK de combinacion de las PK de las dimensiones, pero lo aconsejable es coger solo la PK de mas bajo nivel
	- https://www.guru99.com/star-snowflake-data-warehousing.html

	D_Colleague->D_Department ->
									F_Budget <-D_Category_expense<-D_Expense_cat_grouping<-D_CAPEX
	D_AcademicYear -> D_Semester->

Natural Key
 - Like PK but with some business meaning (instead of ID=37388 we have ID=DNI37388)
 - Key values have business meaning and can be used as a search key when querying the table
 - Column(s) and primary key index already exist so no disk extra space is required for the extra column/index that would be 
 used by a surrogate key column
 - Fewer table joins since join columns have meaning.  For example, this can reduce disk IO by not having to perform extra 
   reads on a lookup table
 - No es recomendable guardar las Natural keys en las F_ 
	
- https://www.mssqltips.com/sqlservertip/5431/surrogate-key-vs-natural-key-differences-and-when-to-use-in-sql-server/#:~:text=Natural%20Key%20Overview,a%20record%20in%20the%20table.&text=The%20following%20is%20an%20example,along%20with%20some%20sample%20data.

Surrogate Key
- It's like a PK but autogenerated 
- No business logic in key so no changes based on business requirements.  For example, if the Employee table above used a integer 
  surrogate key you could simply add a separate column for SIN if you added an office in Canada (to be used in place of SSN)
- Less code if maintaining same key strategy across all entities.  For example, application code can be reused when referencing 
  primary keys if they are all implemented as a sequential integer.
- Better performance since key value is smaller.  Less disk IO is required on when accessing single column indexes.
- Surrogate key is guaranteed to be unique.  For example, when moving data between test systems you don't have to worry 
  about duplicate keys since new key will be generated as data is inserted.
- https://www.mssqltips.com/sqlservertip/5431/surrogate-key-vs-natural-key-differences-and-when-to-use-in-sql-server/#:~:text=Natural%20Key%20Overview,a%20record%20in%20the%20table.&text=The%20following%20is%20an%20example,along%20with%20some%20sample%20data.

SCD
Type 1: Overwrite old data, no history retention 
	- It just overwrite the incorrect/old attribute 
Type 2: Unlimited history 
	- The row that is going to be changed will remain as it is, it is not going to be changed
	- A new row will be added in the table with the new changes, it may be needed to create a new surrogate key for this new row, this is ok
	- The only change done in the old row is to change the "Expiration_Date", so we know that is not currently valid and we change 
	  the "Expiration_Date" to the current date in the new row the "Expiration_Date" will be a date far from the future
	- Another possiblity instead of using "Expiration_Date" is adding a current_flag attribute with the value Y/N depending on 
	  it is the current version or not
Type 3: Limited history  
	-it takes the previuos and the current value of one specific column

https://en.wikipedia.org/wiki/Slowly_changing_dimension


	BEST PRACTISES
	- Limit the amount of incoming data to be processed
	- Load first Dimension tables and the Fact tables, the reason is to have all PK and FK updated in the dimensions before than 
	  having hem in the F_ tables
	- Parallel the processes as much as possible
	- Use the surrogate key in both Dimensions and Fact tables








